{"version":3,"sources":["Results.js","App.js","serviceWorker.js","index.js"],"names":["Results","props","react_default","a","createElement","src","i","images","downsized_large","url","alt","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","search","axios","get","state","value","then","response","console","log","setState","imageurl","data","catch","error","handleChange","bind","assertThisInitialized","handleSubmit","event","target","preventDefault","map","src_Results","type","placeholder","onChange","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sQAUeA,MARf,SAAiBC,GACb,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,EAAEC,OAAOC,gBAAgBC,IAAKC,IAAI,cC8C/CC,cA9CX,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMd,KAkBVkB,OAAS,WACLC,IAAMC,IAAI,yCAA0CT,EAAKU,MAAMC,MAAO,6CACjEC,KAAK,SAACC,GACHC,QAAQC,IAAIF,GACZb,EAAKgB,SAAS,CACVC,SAAUJ,EAASK,KAAKA,SAG/BC,MAAM,SAAUC,OAzBrBpB,EAAKU,MAAQ,CAAEC,MAAOX,EAAKX,MAAO4B,SAAU,IAE5CjB,EAAKqB,aAAerB,EAAKqB,aAAaC,KAAlBrB,OAAAsB,EAAA,EAAAtB,CAAAD,IACpBA,EAAKwB,aAAexB,EAAKwB,aAAaF,KAAlBrB,OAAAsB,EAAA,EAAAtB,CAAAD,IACpBA,EAAKO,OAASP,EAAKO,OAAOe,KAAZrB,OAAAsB,EAAA,EAAAtB,CAAAD,IANCA,4EAUNyB,GACTtB,KAAKa,SAAS,CAAEL,MAAOc,EAAMC,OAAOf,6CAI3Bc,GACTA,EAAME,kDAiBN,IAAMhC,EAASQ,KAAKO,MAAMO,SAASW,IAAK,SAAClC,GAAD,OAAMJ,EAAAC,EAAAC,cAACqC,EAAD,CAASnC,EAAGA,MAC1D,OACIJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,SAASC,YAAY,SAASC,SAAU7B,KAAKkB,eACzD/B,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,SAASG,QAAS9B,KAAKI,SACnCjB,EAAAC,EAAAC,cAAA,WACCG,UAzCCuC,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.5f1937c5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Results(props) {\r\n    return (\r\n        <div>\r\n            <img src={props.i.images.downsized_large.url} alt=\"default\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Results;","import React from 'react';\r\nimport axios from 'axios';\r\nimport Results from './Results';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: this.props, imageurl: [] }; //Tag for search\r\n        \r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.search = this.search.bind(this);\r\n    }\r\n\r\n    //For when input is being placed\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    //For when search field is empty \r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    search = () => {\r\n        axios.get('http://api.giphy.com/v1/gifs/search?q='+ this.state.value +'&api_key=JQI7xYodCQUL8IIV4Iddwf7Sigw1Snl6')\r\n            .then((response) => {\r\n                console.log(response)\r\n                this.setState({\r\n                    imageurl: response.data.data\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n                //Error Text\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const images = this.state.imageurl.map( (i) =><Results i={i}/> )\r\n        return (\r\n            <div>\r\n                <h2>Search for a gif:</h2>\r\n                <input type=\"search\" placeholder=\"Search\" onChange={this.handleChange}></input>\r\n                <input type=\"submit\" onClick={this.search}></input>\r\n                <br></br>\r\n                {images}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}